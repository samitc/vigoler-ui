{"version":3,"sources":["ui/Video.js","ui/Error.js","App.js","serviceWorker.js","index.js"],"names":["Video","props","downloadUrl","video","finish","App","URL","id","state","isDownloading","ids","startDownloadVideo","bind","fetchVideo","downloadVideoTimeout","this","clearTimeout","setState","fetch","method","then","response","status","setTimeout","FETCH_VIDEO_PERIODIC","json","newIds","filter","x","includes","addVideoCallback","className","disabled","name","loading","sizeUnit","size","color","onClick","href","Component","Error","isStillShow","timeoutCallback","timeout","toast","errorMessage","type","youUrl","videos","isLoading","error","configure","addVideo","ok","vids","push","e","console","log","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","label","fullWidth","value","onChange","text","target","variant","body","vid","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d41ff06d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport App from '../App.js'\nimport Button from '@material-ui/core/Button'\nimport { PulseLoader } from 'react-spinners';\n\nexport default class Video extends Component {\n    static FETCH_VIDEO_PERIODIC = 1000;\n\n    constructor(props) {\n        super(props);\n        let downloadUrl = null\n        if (props.video.finish) {\n            downloadUrl = App.URL + \"/\" + this.props.video.id + \"/download\";\n        }\n        this.state = { downloadUrl: downloadUrl, isDownloading: false, ids: [] };\n        this.startDownloadVideo = this.startDownloadVideo.bind(this);\n        this.fetchVideo = this.fetchVideo.bind(this);\n        this.downloadVideoTimeout = null\n    }\n\n    componentWillUnmount() {\n        if (this.downloadVideoTimeout !== null) {\n            clearTimeout(this.downloadVideoTimeout)\n        }\n    }\n\n    startDownloadVideo() {\n        this.setState({ isDownloading: true });\n        fetch(App.URL + \"/\" + this.props.video.id,\n            {\n                method: 'POST'\n            }).then(response => {\n                if (response.status === 200) {\n                    this.downloadVideoTimeout = setTimeout(this.fetchVideo, Video.FETCH_VIDEO_PERIODIC)\n                }\n            });\n    }\n\n    fetchVideo() {\n        if (this.state.downloadUrl === null) {\n            fetch(App.URL + \"/\" + this.props.video.id,\n                {\n                    method: 'GET'\n                }).then(response => {\n                    if (response.status === 200) {\n                        this.setState({ downloadUrl: App.URL + \"/\" + this.props.video.id + \"/download\" });\n                    }\n                    else if (response.status === 202) {\n                        response.json().then(video => {\n                            if (video.ids != null) {\n                                let newIds = video.ids.filter(x => !this.state.ids.includes(x));\n                                for (let id of newIds) {\n                                    this.props.addVideoCallback(id)\n                                }\n                                this.setState({ ids: video.ids })\n                            }\n                            this.downloadVideoTimeout = setTimeout(this.fetchVideo, Video.FETCH_VIDEO_PERIODIC)\n                        })\n                    }\n                });\n        }\n    }\n\n    render() {\n        const createProcessArea = () => {\n            return (\n                <div className='Flex-div'>\n                    <Button disabled>{this.props.video.name}</Button>\n                    {this.state.isDownloading ?\n                        <div className='Download-Video'>\n                            <PulseLoader\n                                loading={this.state.isDownloading}\n                                sizeUnit={\"px\"}\n                                size={15}\n                                color={\"blue\"}\n                            /></div> :\n                        <Button onClick={this.startDownloadVideo}>process</Button>}\n                </div>\n            )\n        };\n        return (\n            <div>\n                {this.state.downloadUrl === null && createProcessArea()}\n                {this.state.downloadUrl !== null &&\n                    <Button href={this.state.downloadUrl}>{this.props.video.name}</Button>}\n            </div>\n        );\n    }\n}","import React, { Component } from 'react'\nimport { toast } from 'react-toastify';\nexport default class Error extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { isStillShow: true }\n        setTimeout(() => {\n            this.setState({ isStillShow: false })\n            if (props.timeoutCallback != null) {\n                props.timeoutCallback()\n            }\n        }, props.timeout)\n        toast(props.errorMessage, {\n            type: 'error',\n        })\n    }\n    render() {\n        return (\n            <div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Video from './ui/Video.js'\nimport Error from './ui/Error.js'\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button'\nimport { RingLoader } from 'react-spinners';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nclass App extends Component {\n    static URL = \"https://vigoler.eastus2.azurecontainer.io:443/videos\";\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            youUrl: \"\",\n            videos: [],\n            isLoading: false,\n            error: false,\n        }\n        toast.configure()\n    }\n\n    render() {\n        const textChange = (text) => {\n            this.setState({ youUrl: text.target.value })\n        };\n        const download = () => {\n            if (!this.state.isLoading) {\n                this.setState({ isLoading: true });\n                fetch(App.URL, {\n                    body: this.state.youUrl,\n                    method: \"POST\"\n                }).then(response => {\n                    if (response.ok) {\n                        response.json().then(videos => {\n                            let vids = this.state.videos;\n                            for (let vid of videos) {\n                                vids.push(vid)\n                            }\n                            this.setState({ videos: vids })\n                        })\n                    } else {\n                        this.setState({ error: true })\n                    }\n                    this.setState({ isLoading: false })\n                }, (e) => {\n                    console.log(e)\n                })\n            }\n        };\n        const addVideo = (id) => {\n            fetch(App.URL + \"/\" + id, {\n                method: \"GET\"\n            }).then(response => {\n                if (response.ok) {\n                    response.json().then(video => {\n                        let vids = this.state.videos;\n                        video.finish = true\n                        vids.push(video)\n                        this.setState({ videos: vids })\n                    })\n                } else {\n                    this.setState({ error: true })\n                }\n            }, (e) => {\n                console.log(e)\n            })\n        }\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h2>Download videos from youtube and many more</h2>\n                </header>\n                <ToastContainer\n                    position=\"bottom-center\"\n                    autoClose={this.props.timeout}\n                    hideProgressBar\n                    newestOnTop={false}\n                    closeOnClick\n                    rtl={false}\n                    pauseOnVisibilityChange\n                    draggable={false}\n                    pauseOnHover={false}\n                />\n                {this.state.error && <Error\n                    timeout={2000}\n                    errorMessage=\"can not find any video.\"\n                    timeoutCallback={() => { this.setState({ error: false }) }}\n                />}\n                <TextField\n                    label=\"video url\"\n                    className=\"Video-url\"\n                    fullWidth\n                    value={this.state.youUrl}\n                    onChange={textChange}\n                />\n                <div className='Download-url'>\n                    <Button variant=\"contained\" color=\"primary\" className='Download-url' onClick={download}>\n                        Download\n                    </Button>\n                </div>\n                {this.state.videos.map(video => <Video key={video.id} video={video} addVideoCallback={addVideo} />)}\n                <div className='Video-loading'>\n                    <RingLoader loading={this.state.isLoading}\n                        sizeUnit={\"px\"}\n                        size={150}\n                        color={\"blue\"}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}